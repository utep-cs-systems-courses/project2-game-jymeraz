//Alternate LEDs from Off, Green, and Red
#include <msp430.h>
#include "libTimer.h"
#include "led.h"
#include "buzzer.h"
#include "switches.h"

int main(void) {
  switch_init();
  led_init();
  buzzer_init();
  
  configureClocks();		/* setup master oscillator, CPU & peripheral clocks */
  enableWDTInterrupts();	/* enable periodic interrupt */
  or_sr(0x18);		/* CPU off, GIE on */
}
/*
void ledsOff() {
  greenControl(0);
  redControl(0);
}

// blink state machine
static int blinkLimit = 8;   //  state var representing reciprocal of duty cycle
static int direction = 0;
static int color = 0;
void blinkUpdate() // called every 1/250s to blink with duty cycle 1/blinkLimit
{
  static int blinkCount = 0; // state var representing blink state
  blinkCount ++;
  if (blinkCount >= blinkLimit) {
    blinkCount = 0;
    if (color == 0) {
      greenControl(1);
    } else {
      redControl(1);
    }
  } else {
    greenControl(0);
    redControl(0);
  }
}

void oncePerSecond() // repeatedly start bright and gradually lower duty cycle, one step/sec
{
  if (blinkLimit >= 8) { 
      direction = 0;
      color ^= 1;
  }
  if (blinkLimit <= 0) {
      direction = 1;
  }
 
  if (direction == 1) {
    blinkLimit ++;
  } else {
    blinkLimit --;
  }
}

void secondUpdate()  // called every 1/250 sec to call oncePerSecond once per second
{
  static int secondCount = 0; // state variable representing repeating time 0â€¦1s
  secondCount ++;
  if (secondCount >= 250) { // once each second
    secondCount = 0;
    oncePerSecond();
  }
}

void button1() // called every 1/250 sec
{
  blinkUpdate();
  secondUpdate();
}

static int on = 0;
static int prev1 = 0;
static int prev2 = 1;
static int count = 1;
void fibonacci() {
  int next = prev1 + prev2;
  if (count == 2*next) {
    prev1 = prev2;
    prev2 = next;
    count = 0;
    color ^= 1;
  }
  count ++;
}

void button2() {
  static int secondCount = 0;
  secondCount ++;
  if (secondCount >= 250) {
    ledsOff();
    fibonacci();
    secondCount = 0;
    on ^= 1;
    if (color == 0)
      greenControl(on);
    else
      redControl(on);
  }
}
*/
/*
static int sw1 = 0;
static int sw2 = 0;
static int sw3 = 0;
static int sw4 = 0;
void switch_interrupt_handler()
{
  char p2val = P2IN;
  P2IES |= (p2val & SWITCHES);
  sw1 = (p2val & SW1) ? 0 : 1;
  sw2 = (p2val & SW2) ? 0 : 1;
  sw3 = (p2val & SW3) ? 0 : 1;
  sw4 = (p2val & SW4) ? 0 : 1;
}*/
/*
void __interrupt_vec(WDT_VECTOR) WDT()	/* 250 interrupts/sec 
{
  if (sw1 == 1) {
    buzzerOff();
    button1();
  } else if (sw2 == 1) {
    buzzerOff();
    button2();
  } else if (sw3 == 1) {
    song1();
  } else if (sw4 == 1) {
    song2();
  }
} 

void __interrupt_vec(PORT2_VECTOR) Port_2()
{
  if (P2IFG & SWITCHES) {
    P2IFG &= ~SWITCHES;
    switch_interrupt_handler();
  }
}
*/
